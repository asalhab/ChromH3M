#!/bin/bash
#$ -S /bin/bash
#$ -N WGBS_Seg
#$ -cwd
#$ -j y
#$ -V
#$ -l h_vmem=60G

m=0.5
FDR=5
minCover=5
nrCores=2
genomeLength="hg19"
Pipeline_name="WGBS_Seg_Pipeline.sh"
version="MSRv1"
#### How to use this script
printHelp() {
   echo -e "$(tput bold)Description:$(tput sgr0)"
   echo -e "This script is intended to do genome wide DNA-methylation segmentation using MethylSeekR tool. The inputs of this script are *bed(gz) of methylation and snp calls generated by MCSvX bisulfite DEEP pipeline (DOI: 10.17617/1.2W). It outputs four semgents HMDs,PMDs,LMRs and UMRs in addition to some illustrative plots. UMRs are CpG dense regions with low methylation level(<m; 'm' is $m by default) while LMRs are CpG poor regions with low methylation level(<m) and number of CpGs n<30, where 'n' is calculated at given FDR."
   echo -e ""
   echo -e "$(tput bold)Usage:$(tput sgr0)"
   echo -e " bash $Pipeline_name  $(tput bold)$(tput setaf 1)-i input.bed     -s SNP.vcf$(tput sgr0)     [-g genomeLength]     [-n SampleName]     [-o output folder]     [-l number of cores]     [-m methylation cut-off]     [-f FDR cut-off]     [-c minCover]"
   echo -e ""
   echo -e " $(tput bold)Mandatory:$(tput sgr0)"
   echo -e "  -i input BED file (chr,start,end,meth.Level,total_reads,strand), it could be gzipped"
   echo -e "  -s SNP file(vcf), it could be gzipped"
   echo -e " $(tput bold)Optional:$(tput sgr0)"
   echo -e "  -g genome length (Shortcuts: $genomeLength(Default), hg38 or mm10)"
   echo -e "  -n Sample name "
   echo -e "  -o output folder "
   echo -e "  -l number of cores (Default: $nrCores cores)"
   echo -e "  -m methylation level cut-off(Default $m )"
   echo -e "  -f FDR cut-off(Default $FDR%)"
   echo -e "  -c minimum coverage for calling UMRs/LMRs (Default: $minCover)"
}

while getopts ":hi:s:g:n:l:m:f:o:c:" opt
do
   case $opt in
      h) printHelp; exit 0 ;;
      i) input="$OPTARG" ;;
      s) snp="$OPTARG" ;;
      g) genomeLength="$OPTARG" ;;
      n) name="$OPTARG" ;;
      l) nrCores="$OPTARG" ;;
      m) m="$OPTARG" ;;
      f) FDR="$OPTARG" ;;
      o) outFolder="$OPTARG" ;;
      c) minCover="$OPTARG" ;;
      *) printHelp; exit 1 ;;
   esac
done

#### check if all the necessary arguments were supplied
if [[ -z "$input" ]] || [[ -z "$snp" ]]
   then
   echo -e "\n$(tput bold)$(tput setaf 1)ERROR ($Pipeline_name): Must set all mandatory options$(tput sgr0)\n"
   printHelp
   exit 1
fi

MethylSeekR_sh="WGBS_Seg_Pipeline.sh"
MethylSeekR_R="WGBS_Seg_Pipeline.r"
Rscript="Path to Rscript"
bedtools="Oath to bedtools"
R="Path to R"
export TMPDIR=/DEEP_fhgfs/tmp


case "$genomeLength" in
   hg19) genomeLength="Path to the human genome length file (chr, length)"
         gaps="Path to the bed file containing the gaps you want to filter (gaps from UCSC)" ## can be downloaded from http://genome.ucsc.edu/cgi-bin/hgTables with assembly:hg19, group:mapping and sequencing,  track:gap and table:gap. and then sorted by -k1,1 -k2,2n
         genome="hg19"
         assembly="GRCh37"
         ;;
   hg38) genomeLength="Path to the human genome length file (chr, length)"
         gaps="Path to the bed file containing the gaps you want to filter (gaps from UCSC" ## can be downloaded from http://genome.ucsc.edu/cgi-bin/hgTables with assembly:hg19, group:mapping and sequencing,  track:gap and table:gap. and then sorted by -k1,1 -k2,2n
         genome="hg38"
         assembly="GRCh38"
         ;;
   mm10) genomeLength="Path to the human genome length file (chr, length)"
        gaps="Path to the bed file containing the gaps you want to filter (gaps from UCSC"
        genome="mm10"
        assembly="GRCm38"
        ;;
esac

if [[ ! -z "$name" ]]
   then

   name=$name
   prefix=${version}.$(date +%Y%m%d).${assembly}
   echo ${name}

else

   name=$(basename ${input%%.*})
   prefix=${version}.$(date +%Y%m%d).${assembly}

fi

if [[ ! -z "$outFolder" ]]
   then

   mkdir -p $outFolder

else

   outFolder=${name}_${version}
   mkdir -p $outFolder

fi

readFile="cat"
if [[ $input == *gz ]]
   then

   readFile="zcat"

fi

start=$(echo $(date))

TMPWD=`mktemp --tmpdir=$TMPDIR -d WGBS_Seg_Pipeline.XXXXXXXXXX`
if [ ! -d "$TMPWD" ]
   then

   echo "failed to create folder:"
   echo "$TMPWD"
   exit 1

fi

touch $TMPWD/log.txt

echo -e "`date` LOGG ($Pipeline_name): starting ......" 2>&1 | tee -a  $TMPWD/log.txt
echo -e "### The used scripts are:" 2>&1 |tee -a $TMPWD/log.txt
echo -e "$MethylSeekR_sh" 2>&1 |tee -a $TMPWD/log.txt
echo -e "$MethylSeekR_R\n" 2>&1 |tee -a $TMPWD/log.txt

echo -e "### This command has been used:" 2>&1 | tee -a $TMPWD/log.txt
echo -e "bash $MethylSeekR_sh    -i $input    -s $snp    -g $genomeLength    -n $name    -o $outFolder    -l $nrCores    -m $m    -f $FDR \n"  2>&1 | tee -a $TMPWD/log.txt

### generating the proper input TAB file for MethylSeekR (chr,pos,Total,Meth) 
echo -e "`date` LOGG ($Pipeline_name): generating the TAB file to be fed into MethylSeekR ......" 2>&1 | tee -a  $TMPWD/log.txt
join -1 1 -2 1 -a 1 -a 2 <( $readFile $input|awk -vOFS='\t' '$6=="+" {print $1"_"$2,$1,$2,$6,$5,($4*$5)/100}' |sort -k1,1) \
                         <( $readFile $input|awk -vOFS='\t' '$6=="-" {print $1"_"($2-1),$1,$2-1,$6,$5,($4*$5)/100}' | sort -k1,1) \
                         | sort -k2,2 -k3,3n \
                         | awk -vOFS='\t' '{printf ("%s\t%d\t%d\t%d\n",$2,$3,$5+$10,$6+$11+0.5)}' \
                         | egrep -v "random|GL|NC|M|hs|hap|Un|J|EBV|ph|L" \
                         > $TMPWD/${name}.${prefix}.MethylSeekR.tab 

awk -vOFS='\t' '{if($1!~/chr/)print "chr"$0;else print $0}' $TMPWD/${name}.${prefix}.MethylSeekR.tab |awk '$1~/chr[1-9XY]/'|egrep -v "random|GL|NC|M|hs|hap|Un|J|EBV|ph|L" > $TMPWD/temp && mv $TMPWD/temp $TMPWD/${name}.${prefix}.MethylSeekR.tab

### preparing the snp file
$readFile $snp|sed '/^#/ d' |cut -f 1,2|awk -vOFS='\t' '{if($1!~/chr/)print "chr"$1,$2;else print $0}'|sort -k1,1 -k2,2n |awk '$1~/chr[1-9XY]/'|egrep -v "random|GL|NC|M|hs|hap|Un|J|EBV|ph|L" > $TMPWD/${name}.${prefix}.snp.tab


### running the Rscript
echo -e "`date` LOGG ($Pipeline_name): starting the R script......" 2>&1 | tee -a  $TMPWD/log.txt

$Rscript --vanilla $MethylSeekR_R  $genome  $TMPWD $TMPWD/${name}.${prefix}.MethylSeekR.tab $TMPWD/${name}.${prefix}.snp.tab $name  $prefix $m $FDR $minCover $nrCores    &> $TMPWD/Rcommand.out

echo -e "`date` LOGG ($Pipeline_name): end of R script ......" 2>&1 | tee -a  $TMPWD/log.txt


### generating bed files
echo -e "`date` LOGG ($Pipeline_name): generating the visualization tracks for IGV ......" 2>&1 | tee -a  $TMPWD/log.txt

awk -vOFS='\t' '(NR>1) {print  > "'$TMPWD'/"$4".bed"}' $TMPWD/${name}.${prefix}.UMRsLMRs.tab
awk -vOFS='\t' '$4=="UMR" {print $1,$2,$3,"UMR"}' $TMPWD/UMR.bed|sort -k1,1 -k2,2n  > $TMPWD/${name}.${prefix}.UMRs.bed
awk -vOFS='\t' '$4=="LMR" {print $1,$2,$3,"LMR"}' $TMPWD/LMR.bed|sort -k1,1 -k2,2n > $TMPWD/${name}.${prefix}.LMRs.bed
awk -vOFS='\t' '(NR>1) {print $1,$2,$3,"PMD"}' $TMPWD/${name}.${prefix}.PMDs.tab|sort -k1,1 -k2,2n  > $TMPWD/${name}.${prefix}.PMDs.bed

$bedtools subtract  -a <(awk -vOFS='\t' '{if($1!~/chr/)print "chr"$1,"1",$2;else print $1,"1",$2}' $genomeLength|sort -k1,1 -k2,2g|egrep -v "random|GL|NC|M|hs|hap|Uk|J|EBV|ph|L")  -b <(cat $TMPWD/${name}.${prefix}.PMDs.bed $TMPWD/${name}.${prefix}.UMRs.bed $TMPWD/${name}.${prefix}.LMRs.bed|sort -k1,1 -k2,2g) \
                     | awk -vOFS='\t' '($3-$2>1 && $2>0 && $3>0){print $0,"HMD"}' \
                     | awk '$1~/chr[1-9XY]/' \
                     | sort -k1,1 -k2,2n \
                     > $TMPWD/${name}.${prefix}.HMDs.bed

cat $TMPWD/${name}.${prefix}.UMRs.bed $TMPWD/${name}.${prefix}.LMRs.bed $TMPWD/${name}.${prefix}.PMDs.bed $TMPWD/${name}.${prefix}.HMDs.bed |sort -k1,1 -k2,2n > $TMPWD/${name}.${prefix}.segments.bed


### filter the gaps (centromers, telomers.....) and color the segments
$bedtools subtract -a $TMPWD/${name}.${prefix}.segments.bed -b $gaps \
                     | awk -vOFS='\t' '$4=="HMD"{print $0,"0",".",$2,$3,"202,0,32"};$4=="PMD"{print $0,"0",".",$2,$3,"244,165,130"};$4=="UMR"{print $0,"0",".",$2,$3,"5,113,176"};$4=="LMR"{print $0,"0",".",$2,$3,"146,197,222"}' \
                     | awk '$1~/chr[1-9XY]/' \
                     | sort -k1,1 -k2,2n \
                     > $TMPWD/tmp && mv $TMPWD/tmp $TMPWD/${name}.${prefix}.segments.bed 


### calculating the average methylation within the segments
$bedtools intersect -a $TMPWD/${name}.${prefix}.segments.bed -b <(awk -vOFS='\t' -v filter=$minCover '($3>=filter){print $1,$2,$2+1,$4/$3}' $TMPWD/${name}.${prefix}.MethylSeekR.tab) -wao \
                     | awk -vOFS='\t' ' {key=$1"_"$2"_"$3"_"$4} key!=curKey{if(NR>1){if(overlap>0){print curKey,sum1/sum2}else{print curKey,"NA"}} sum1=0;sum2=0;overlap=0;curKey=key} {sum1+=$13;sum2++;overlap+=$14} END{if(overlap>0){print curKey,sum1/sum2}else{print curKey,"NA"}}' \
                     | awk ' {gsub(/_/,"\t");print} ' \
                     | awk -vOFS='\t' '{gsub(/chr/,"");print}' \
                     | sort -k1,1 -k2,2n \
                     > $TMPWD/${name}.${prefix}.segments.meth.bed

### adding the methylation level as column 5 in addition to the header then remove "chr", gzip and index the file
cat <(echo track name="${name}.MethylSeekR" description="${name}.MethylSeekR" visibility=1 itemRgb="On") <(paste $TMPWD/${name}.${prefix}.segments.bed $TMPWD/${name}.${prefix}.segments.meth.bed|awk -vOFS='\t' '{$5=$14; print}'|cut -f 1-9) > $TMPWD/tmp && mv $TMPWD/tmp $TMPWD/${name}.${prefix}.segments.bed

awk -vOFS='\t' '{gsub(/chr/,"");print}' $TMPWD/${name}.${prefix}.segments.bed >  $TMPWD/temp && mv $TMPWD/temp $TMPWD/${name}.${prefix}.segments.bed
bgzip $TMPWD/${name}.${prefix}.segments.bed
tabix -p bed -S 1 $TMPWD/${name}.${prefix}.segments.bed.gz


### plotting some statistics 
echo -e "`date` LOGG ($Pipeline_name): plotting some statistics ......"  2>&1 | tee -a $TMPWD/log.txt
#R -q --vanilla <<RSCRIPT
touch $TMPWD/${name}.${prefix}.Rmd
tee $TMPWD/${name}.${prefix}.Rmd << EOF
---
output: html_document
title: ${name} Report
author: Abdulrahman Salhab
date: "\`r format(Sys.time(), '%d %B, %Y')\`"
---

<a href="http://epigenetik.uni-saarland.de/de/home/" >
<img src="/home/abdosa/logoUds.png" style="position:absolute; top:20px;right:500px; width: 175px;" />
</a>


 - [1. Overview](#overview)
 - [2. Average Methylation](#average methylation)
 - [3. Segment Length Distributions](#segment length distributions)
 - [4. Segment Percentages](#segment percentages)
 - [5. Hypomethylation Regions Classification](#LMR_UMR)
 - [6. FDR Calculation](#fdr)



<h1 id="overview">Overview</h1>
This report was generated based on the **MSRv1** pipeline written by [Abdulrahman Salhab](mailto:abdosalhab@gmail.com). It runs [MethylSeekR](https://bioconductor.org/packages/release/bioc/html/MethylSeekR.html) tool to segment the genome into hypomethylated regions (LMRs and UMRs), partially methylated domains (PMDs) and Highly methylated domains (HMDs). PMDs are identified using 2-state Hidden Markov Model. LMRs and UMRs are identified by two parameters; methylation level and minimum number of CpGs in a region. The rest of the genome is called HMDs after excluding a black list regions (centromeres and telomers).

**Note:** RRBS results should be taken with caution becasue MethylSeekR was intended to work with WGBS data.

\`\`\`bash
bash $MethylSeekR_sh \
-i "${input}" \
-s "${snp}" \
-g ${genomeLength} \
-n ${name} \
-o ${outFolder} \
-l $nrCores \
-m $m \
-f $FDR 
\`\`\`

\`\`\`{r, echo=F, warning=FALSE}
data <- read.table("$TMPWD/${name}.${prefix}.segments.meth.bed") 
df <- data.frame(data[,c(4,5)])
colnames(df) <- c('state','avgMethPerSegment') 
df\$length <- data[,3]-data[,2]
m <- melt(df,id.vars=c("state"))
m.meth <- m[m[,2]=="avgMethPerSegment",]
m.length <- m[m[,2]=="length",]
c <- dcast(m.length,state~variable,sum)
c <- cbind(c,100*(c[,2]/sum(as.numeric(c[,2]))),'var')
colnames(c) <- c('state','length','percentage' , 'var')
df[,"state"] <- factor(df[,"state"], levels=c("HMD","PMD","LMR","UMR"))
c[,"state"] <- factor(c[,"state"], levels=c("HMD","PMD","LMR","UMR"))
\`\`\`


<h1 id="average methylation">Average Methylation</h1>
Average methylation of CpGs within each type of the segments is calculated (only CpGs with >= 5X coverage where considered in this calculation).
\`\`\`{r Plot1, fig.width=7, fig.height=6, echo=F, warning=F}
g1 <- ggplot(df, aes(x = state, y = avgMethPerSegment, fill=state)) + geom_boxplot() + xlab("") + ylab("methylation") + theme_bw() + scale_fill_manual(values=c("#CA0020","#F4A582","#92C5DE","#0571B0"))
ggplotly(g1)
\`\`\`


<h1 id="segment length distributions">Segment Length Distributions</h1>
Segment length distributions for each type of the segment are calculated in log10 scale. FMRs and PMDs usually are very long. LMRs and UMRs are short and represent the distal and proximal regulatory regions respectively.
\`\`\`{r Plot2, fig.width=7, fig.height=6, echo=F}
#g2 <- ggplot(df,aes(x = state, y = length, fill=state)) + geom_boxplot() + scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),labels = scales::trans_format("log10", scales::math_format(10^.x))) + annotation_logticks(sides = "l") + xlab("state") + ylab("segment length (bp)") + theme_bw() + scale_fill_manual(values=c("#CA0020","#F4A582","#92C5DE","#0571B0"))
g2 <- ggplot(df,aes(x = state, y = log10(length), fill=state)) + geom_boxplot() + xlab("state") + ylab("log2(segment length) (bp)") + theme_bw() + scale_fill_manual(values=c("#CA0020","#F4A582","#92C5DE","#0571B0"))
ggplotly(g2)
\`\`\`


<h1 id="segment percentages">Segment Percentages</h1>

\`\`\`{r Plot3, fig.width=4, fig.height=6, echo=F}
g3 <- ggplot(c,aes(x=var,y=percentage,fill=state)) + geom_bar(stat="identity",position = "fill") + xlab("${name}") + theme_bw() + scale_fill_manual(values=c("#CA0020","#F4A582","#92C5DE","#0571B0"))
ggplotly(g3)
\`\`\`


<h1 id="LMR_UMR">Hypomethylation Regions Classification</h1>
Hypomethylation segments are calculated based on two parameters. (m) the methylation level which is set manually (default to 50\%) and (n) minimum number of CpGs in the region (controlled by FDR). The classification into LMRs and UMRs is according to the number of CpGs. LMRs are regions with low number of CpGs (>n and <30 CpGs) wheras UMRs are CpG rich regions (>30 CpGs).

\`\`\`{r Plot4,  fig.width=6, fig.height=6, message=F, echo=F, warning=F}
y <- readRDS("$TMPWD/${name}.${prefix}.UMRsLMRs.gr.rds")
df <- data.frame(seqnames=seqnames(y), starts=start(y), ends=end(y), nCG=elementMetadata(y)\$nCG, median.meth=elementMetadata(y)\$median.meth)
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
smoothScatter(log2(df\$nCG), 100 * df\$median.meth, colramp = jet.colors, xlab = "log2 number of CpGs in segment", ylab = "median methylation (%)")
abline(v = log2(30), lty = 5)
\`\`\`




<h1 id="fdr">FDR Calculation</h1>
FDR controls the number of CpGs in a region with a certain level of methylation (default is 50\%; the vertical dashed line). Series of CpGs number are chosen to check the FDR values. (n) is determined by the smallest (n) such that the FDR is below a given cut-off (here 5%; the horizontal dashed line).

\`\`\`{r Plot5,  message=F, echo=F, warning=F}
stats <- readRDS("$TMPWD/${name}.${prefix}.stats.rds")
x <- stats\$FDRs
xm <- melt(x)
xm\$Var1 <- xm\$Var1*100
colnames(xm) <- c("methylation","CpGs","FDR")
xm\$CpGs <- as.factor(xm\$CpGs)
ggplot(xm, aes(x=methylation, y=FDR, fill=CpGs)) + geom_bar(stat="identity", position=position_dodge()) + geom_hline(yintercept=${FDR}, linetype="dashed", color = "red") + geom_vline(xintercept=${m}*100, linetype="dashed", color = "red") + coord_cartesian( ylim = c(0,20)) + theme_bw() + xlab("methylation cut-off(%)") + ylab("FDR(%)") + scale_fill_grey(guide = guide_legend(title = "#CpGs"))
#ggplotly(g5)

z <- stats\$numSegments
zm <- melt(z)
zm\$Var1 <- zm\$Var1*100
colnames(zm) <- c("methylation","CpGs","segments")
zm\$CpGs <- as.factor(zm\$CpGs)
ggplot(zm, aes(x=methylation, y=segments, fill=CpGs)) + geom_bar(stat="identity", position=position_dodge()) + theme_bw() + xlab("methylation cut-off(%)") + ylab("number of segments") + scale_fill_grey(guide = guide_legend(title = "#CpGs"))
#ggplotly(g6)
\`\`\`

EOF

$R --vanilla <<RSCRIPT
.libPaths("/home/abdosa/miniconda2/envs/R.3.5/lib/R/library")
library(knitr)
library(ggplot2)
library(reshape2)
library(plotly)
library(GenomicRanges)
rmarkdown::render("$TMPWD/${name}.${prefix}.Rmd", output_file="$TMPWD/${name}.${prefix}.html")
RSCRIPT


### remove "chr" from the chromosome name
awk -vOFS='\t' '{gsub(/chr/,"");print}'  $TMPWD/${name}.${prefix}.MethylSeekR.tab > $TMPWD/temp && mv $TMPWD/temp $TMPWD/${name}.${prefix}.MethylSeekR.tab

echo -e "`date` LOGG ($Pipeline_name): copying to the output folder $outFolder ......" 2>&1 | tee -a  $TMPWD/log.txt
rm $TMPWD/{*UMR*bed,*LMR*bed,*HMD*bed,*PMD*bed,*PMD*tab,*UMRsLMRs.tab,*segments.meth.bed,*snp*tab}
#rm $TMPWD/{*UMR*bed,*LMR*bed,*HMD*bed,*PMD*bed,*PMD*tab,*UMRsLMRs.tab,*snp*tab}
cp  $TMPWD/*  $outFolder/

end=$(echo $(date))

### writing analysis meta data file (.amd.tsv)
touch $TMPWD/${name}.${prefix}.amd.tsv
tee $TMPWD/${name}.${prefix}.amd.tsv << EOF
[Description]
process_name`echo -e "\t${version}"`
pipeline_name`echo -e "\t${Pipeline_name%.sh}"`
user`echo -e "\tAbdulrahman Salhab"`
run_start`echo -e "\t$start"`
run_end`echo -e "\t$end"`

[Scripts]
bash_script`echo -e "\t$MethylSeekR_sh"`
R_script`echo -e "\t$MethylSeekR_R"`

[Inputs]
CpG_meth`echo -e "\t$input"`
snp`echo -e "\t$snp"`

[References]
gab_regions`echo -e "\t$gaps"`
genome_length`echo -e "\t$genomeLength"`

[IDs]
internal_ID`echo -e "\t$name"`
prefix`echo -e "\t$prefix"`
out_name`echo -e "\t${name}.${prefix}"`
assembly`echo -e "\t$assembly"`
genome`echo -e "\t$genome"`

[Outputs]
out_folder`echo -e "\t$(pwd)/$outFolder"`
logs`echo -e "\t$(pwd)/$outFolder/${name}.log,$(pwd)/$outFolder/Rcommand.out"`
tmpdir`echo -e "\t$TMPDIR"`
working_tmpdir`echo -e "\t$TMPWD"`
merged_strands_CpG_meth`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep MethylSeekR.tab)"`
segments`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep gz|tr '\n' ',')"`
rds_objects`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep rds|tr '\n' ',')"`
meth_dist_cov`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep cov.pdf)"`
segments_statistics`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep statistics)"`
alpha_dist`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep alpha|tr '\n' ',')"`
hypomethylated_classes`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep scatter)"`
FDR_segments`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep FDR)"`
regions_example`echo -e "\t$(ls -d $(pwd)/$outFolder/*|grep example)"`

[Parameters]
hypo_meth_cuttoff`echo -e "\t$m"`
FDR_cutoff`echo -e "\t$FDR%"`
NR_CpGs_LMRs`echo -e "\t$(grep 'CpGs in LMRs' $(pwd)/$outFolder/Rcommand.out|sed -e 's/[^0-9]//g') < nCpGs < 30 @ $FDR% FDR"`
parallel`echo -e "\t${nrCores}"`

[Metrics]
removed_CpGs_perc`echo -e "\t$(grep removed $(pwd)/$outFolder/Rcommand.out)"`
MIN_NR_CpGs_LMRs`echo -e "\t$(grep 'CpGs in LMRs' $(pwd)/$outFolder/Rcommand.out|sed -e 's/[^0-9]//g')"`
$(zcat $(pwd)/$outFolder/*segments.bed.gz|awk 'NR>1 && $5!="NA"'|awk -vOFS='\t' '{ a[$4]++; sum[$4]+=$5;count[$4]++; l[$4]+=($3-$2); totl+=($3-$2)} END { for (b in a) { print b"_avg_meth",sum[b]/count[b] } }'|sort -k1,1)
$(zcat $(pwd)/$outFolder/*segments.bed.gz|awk 'NR>1 && $5!="NA"'|awk -vOFS='\t' '{ a[$4]++; sum[$4]+=$5;count[$4]++; l[$4]+=($3-$2); totl+=($3-$2)} END { for (b in a) { print b"_NR_segments",count[b] } }'|sort -k1,1)
$(zcat $(pwd)/$outFolder/*segments.bed.gz|awk 'NR>1 && $5!="NA"'|awk -vOFS='\t' '{ a[$4]++; sum[$4]+=$5;count[$4]++; l[$4]+=($3-$2); totl+=($3-$2)} END { for (b in a) { print b"_percentage_genome",l[b]/totl } }'|sort -k1,1)
$(zcat $(pwd)/$outFolder/*segments.bed.gz|awk 'NR>1 && $5!="NA"'|awk -vOFS='\t' '{ a[$4]++; sum[$4]+=$5;count[$4]++; l[$4]+=($3-$2); totl+=($3-$2)} END { for (b in a) { print b"_mean_length",l[b]/count[b]" bp" } }'|sort -k1,1)
EOF

cp $TMPWD/${name}.${prefix}.amd.tsv $outFolder/
echo -e "`date` LOGG ($Pipeline_name): DONE!" 2>&1 | tee -a  $TMPWD/log.txt
rm $outFolder/log.txt
cp $(pwd)/${name}.log $outFolder/
rm -rf $TMPWD
